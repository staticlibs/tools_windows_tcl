# Tmw::Dialog

package require Itcl 3.3
package require Itk 3.3
package require tile 0.7.5
package require Tclx 8.4

package provide tmw::dialog 1.0

catch {
    namespace import ::itcl::*
    namespace import ::itk::*
}

namespace eval ::Tmw {
}

itk::usual TFrame {
}

itk::usual TButton {
}

class ::Tmw::Dialog {
    inherit itk::Toplevel
    
    itk_option define -buttonpos buttonPos Position c {
        switch -- $itk_option(-buttonpos) {
            "c" {
                pack configure [component buttonbox] \
                    -side top
            }
            "w" {
                pack configure [component buttonbox] \
                    -side left
            }
            "e" {
                pack configure [component buttonbox] \
                    -side right
            }
            default {
                error "wrong button pos, must be w, e or c"
            }
        }
    }
    
    itk_option define -modality modality Modality "application" {
    }
    
    itk_option define -width width Width 1 {
        if {$itk_option(-width) <= 1} {
            return
        }
        wm geometry $itk_interior \
            $itk_option(-width)x$itk_option(-height)
    }
    
    itk_option define -height height Height 1 {
        if {$itk_option(-height) <= 1} {
            return
        }
        wm geometry $itk_interior \
            $itk_option(-width)x$itk_option(-height)
    }
    
    itk_option define -buttonpadx buttonPadx Padx 1 {
        pack configure [component buttonbox] -padx \
            $itk_option(-buttonpadx)
    }
    
    itk_option define -buttonpady buttonPady Pady 1 {
        pack configure [component buttonbox] -pady \
            $itk_option(-buttonpady)
    }
    
    constructor {args} {
        _initialize
        
        eval itk_initialize $args
        hide
    }
    
    destructor {
        grab release [namespace tail $this]
    }
    
    public {
        variable master "" {
            if {$master == ""} {
                return
            }
            if {![winfo ismapped [namespace tail $master]]} {
                return
            }
            wm transient [namespace tail $this] \
                [namespace tail $master]
            update
            center
        }
        
        # @v block: indicates whether the dialog should block
        # @v block: the program execution until it is disposed
        variable block 1 {
            if {$block} {
                wm protocol [namespace tail $this] \
                    WM_DELETE_WINDOW [code $this pressed Close]
            } else {
                wm protocol [namespace tail $this] \
                    WM_DELETE_WINDOW [code $this hide]
            }
        }
        
        method center {{masterwin ""}}
        method add {tag args}
        
        # @c shows the dialog on the screen and sets a local
        # @c grab to it.
        method show {} {
            if {$master != ""} {
                wm transient [namespace tail $this] \
                    [namespace tail $master]
                center
            }
            wm deiconify [namespace tail $this]
            grab set [namespace tail $this]
            if {$block} {
                tkwait variable [scope Wait]
                return $Wait
            }
        }
        
        method hide {} {
            grab release [namespace tail $this]
            wm withdraw [namespace tail $this]
        }
        
        method childsite {} {
            return [component childsite]
        }
        
        method buttonconfigure {tag args} {
            if {![lcontain $_Buttons $tag]} {
                return -code error "$tag does not exist"
            }
            eval component $tag configure $args
        }
        
        method pressed {{tag ""}} {
            if {$tag == ""} {
                return $Wait
            }
            set Wait $tag
        }
    }
    
    protected {
        variable Wait 0
        
        method clampSize {}
    }
    
    private {
        variable _Buttons {}
        
        method _initialize {}
    }
    
}

body ::Tmw::Dialog::center {{masterwin ""}} {
    if {$masterwin == ""} {
        set masterwin [namespace tail $master]
    }
    
    update
    set yx0 [winfo rootx $masterwin]
    set yy0 [winfo rooty $masterwin]
    set yw [winfo width $masterwin]
    set yh [winfo height $masterwin]
    
    # if the window is not mapped yet, take the
    # requested width/height instead of the real
    # width/height
    set mwin [namespace tail $this]
    set mw [winfo reqwidth $mwin]
    set mh [winfo reqheight $mwin]
    if {[winfo ismapped $mwin]} {
        set mw [winfo width $mwin]
        set mh [winfo height $mwin]
    }
    
    set mx0 [expr {round(($yx0 + .5 * $yw) - .5 * $mw)}]
    set my0 [expr {round(($yy0 + .5 * $yh) - .5 * $mh)}]
    
    wm geometry $mwin "+$mx0+$my0"
}


body ::Tmw::Dialog::add {tag args} {
    if {[lcontain $_Buttons $tag]} {
        return -code error "$tag already exists"
    }
    
    set nowait 0
    if {[set i [lsearch $args -nowait]] >= 0} {
        set nowait 1
        lvarpop args $i
    }
    
    set bb [component buttonbox]
    itk_component add $tag {
        eval ttk::button $bb.[string tolower $tag] $args
    }
    
    lappend _Buttons $tag
    pack [component $tag] -side left -padx 3 -pady 3
    
    if {! $nowait} {
        bind [component $tag] <Button-1> +[code $this pressed $tag]
    }
    return [component $tag]
}

body ::Tmw::Dialog::clampSize {} {
    update
    set w [winfo width $itk_interior]
    set h [winfo height $itk_interior]
    #puts aaa,$w,$h
    
    wm minsize $itk_interior $w $h
}

body ::Tmw::Dialog::_initialize {} {
    
    itk_component add childsite {
        ttk::frame $itk_interior.childsite
    }
    
    set sep [ttk::separator $itk_interior.sep -orient horiz]
    
    itk_component add buttonbox {
        ttk::frame $itk_interior.buttonbox
    }
    
    pack [component childsite] -expand yes -fill both -padx 1 -pady 1
    pack $sep -expand n -fill x -pady 5 -padx 1
    pack [component buttonbox] -expand no -fill none -padx 1 -pady 1
    
    #wm protocol [namespace tail $this] WM_DELETE_WINDOW \
    #    [code $this hide]
    wm resizable [namespace tail $this] 0 0
}

proc ::Tmw::dialog {path args} {
    uplevel 0 Dialog $path $args
}

# @c displays a message dialog
#
# @a master: master of the message box
# @a title: title of the message box
# @a type: type of the message box - one of ok, cancel, okcancel, 
# @a type: yes, yesno, yesnocancel
# @a msg: actual message to display
# @a icon: an image icon
proc ::Tmw::message {master title type msg {icon ""}} {
    Tmw::dialog .dlg -title $title -master $master
    switch -- $type {
        ok {
            .dlg add ok -text "Ok"
        }
        okcancel {
            .dlg add ok -text "Ok"
            .dlg add cancel -text "Cancel"
        }
        yes {
            .dlg add yes -text "Yes"
        }
        yesno {
            .dlg add yes -text "Yes"
            .dlg add no -text "No"
        }
        yesnocancel {
            .dlg add yes -text "Yes"
            .dlg add no -text "No"
            .dlg add cancel -text "Cancel"
        }
            
    }
        
    if {$icon != ""} {
        # create icon
    }
    
    pack [ttk::label [.dlg childsite].l -text $msg] -expand y \
        -fill both -padx 10 -pady 10
    set res [.dlg show]
    destroy .dlg
    return $res
}

# @c Displays an input dialog
#
proc ::Tmw::input {master title type} {
    Tmw::dialog .dlg -title $title -master $master
    switch -- $type {
        ok {
            .dlg add ok -text "Ok"
        }
        okcancel {
            .dlg add ok -text "Ok"
            .dlg add cancel -text "Cancel"
        }
        default {
            error "Wrong type, must be ok or okcancel"
        }
    }
    
    set ::Tmw::Inputvar ""
    pack [ttk::entry [.dlg childsite].e -textvariable ::Tmw::Inputvar] \
        -expand y -fill x
    bind [.dlg childsite].e <Return> [code .dlg pressed ok]
    
    set res [.dlg show]
    set tmp $::Tmw::Inputvar
    unset ::Tmw::Inputvar
    destroy .dlg
    if {$res == "cancel"} {
        return ""
    }
    return $tmp
}

#wm geometry . 600x600
#Tmw::dialog .d -buttonpos e -buttonpadx 20 -buttonpady 5 -master .
#.d add cancel -text Cancel
#.d add ok -text Ok
#
#.d configure -master .t
#after idle [.d center .]


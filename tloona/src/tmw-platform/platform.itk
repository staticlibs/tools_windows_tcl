# a main application

package require Itk 3.3
package require tile 0.7.5
package require Tclx 8.4

package require tmw::icons 1.0
package require tmw::toolbarframe 1.0
package require tmw::plugin 1.0

package provide tmw::platform 1.0

# Toolbar options
# See toolbutton.tcl.
option add *Toolbar.relief groove
option add *Toolbar.borderWidth 2
option add *Toolbar.Button.Pad 2
option add *Toolbar.Button.default disabled
option add *Toolbar*takeFocus 0

catch {
    namespace import ::itcl::*
    namespace import ::itk::*
}

namespace eval ::Tmw {
}

itk::usual TFrame {}
itk::usual TButton {}
itk::usual Toolbar {}
itk::usual TLabel {}
itk::usual TProgressbar {}

# @c The main application Megawidget makes it easy to create main frames. It
# @c contains methods to create menus, toolbars and a status line. The toolbar
# @c functionality is delegated to a Toolbarframe megawidget inside the
# @c interior.
# @c Menu entries can be displayed in the main menu and in a main toolbar
# @c simultaneously, see the [menuentry] method.
# @c The builtin statusline contains a status message label (can be configured
# @c via the -status variable) and a progress indicator that can be displayed
# @c on demand. By default it is hidden.
#
# @component mainframe: The toolbar frame that serves as main frame
# @component statusline: The status line. Contains a status message and a
# @component statusline: progress indicator that can be displayed on demand
class Tmw::Platform {
    inherit itk::Toplevel
    
    itk_option define -width width Width 800 {
        component mainframe configure -width $itk_option(-width)
    }
    itk_option define -height height Height 500 {
        component mainframe configure -height $itk_option(-height)
    }
    
    constructor {args} {
        itk_component add mainmenu {
            #puts $itk_interior,[component hull]
            ::menu [component hull].mainmenu -tearoff no -relief raised
        } {
            usual
            rename -relief -menurelief menuRelief Relief
            rename -borderwidth -menubd menuBd Borderwidth
        }
        
        if {[catch {itk_initialize -menu [component mainmenu]}]} {
            component hull configure -menu [component mainmenu]
        }
        
        addStatusLine
        addMainframe
        
        toolbar maintoolbar -pos n -compound none
        defaultMenu
        $this configure -menurelief flat -menubd 1 -mainrelief flat -mainbd 3
        wm protocol [namespace tail $this] WM_DELETE_WINDOW \
            [code $this onQuit]
            
        eval itk_initialize $args
    }
    
    public {
        # @v status: status message
        variable status "ready"
        # @v progressincr: the progress increment. Determines how fast the
        # @v progressincr: progress bar moves
        variable progressincr 10
        # @v threadpool: A threadpool to run long running procedures
        variable threadpool ""
        
        # @c Add or modify a menu entries with icon and command.
        # @c The args are the same as to menu entries, two additional
        # @c arguments are provided: -type for the entry type and
        # @c -toolbar for whether to display the entry in the main
        # @c toolbar as well
        #
        # @a name: name of the menu entry
        # @a args: arguments
        method menuentry {name args}
        
        # @c creates of modifies toolbar buttons. The arguments are
        # @c the same as to ttk::button, with an additional argument
        # @c -toolbar which indicates which toolbar to use. The 
        # @c toolbar component must exist
        method toolbutton {name args} {
            eval component mainframe toolbutton $name $args
        }
        
        # @c create a toolbar or change its style
        method toolbar {name args} {
            eval component mainframe toolbar $name $args
        }
        
        # @c delegate to the inner toolbarframe widget
        method hideToolbar {name} {
            component mainframe tbhide $name
        }
        
        # @c delegate to the inner toolbarframe widget
        method showToolbar {name} {
            component mainframe tbshow $name
        }
        
        # @c shows the progress bar in the status line. This is a
        # @c ttk::progress widget right next to the status information
        # @c in determinate mode (by default). The mode can be configured
        # @c via the -progressmode option
        #
        # @a show: 0 for hide, 1 for show the progress bar. If left empty
        # @a show: (the default), this method returns whether the progress
        # @a show: bar is showing right now
        method showProgress {{show -1}}
        
        # @c callback handler for exiting the application. This
        # @c method is connected to the File.Quit menuentry in
        # @c the default application menu and to the close button
        # @c Clients may override.
        method onQuit {} {
            ::exit
        }
        
        # @c callback handler for default File.New menu entry. Needs
        # @c to be overridden by clients
        method onFileNew {} {}
        # @c callback handler for default File.Open menu entry. Needs
        # @c to be overridden by clients
        method onFileOpen {} {}
        # @c callback handler for default File.Save menu entry. Needs
        # @c to be overridden by clients
        method onFileSave {} {}
        # @c callback handler for default File.Close menu entry. Needs
        # @c to be overridden by clients
        method onFileClose {} {}
        # @c callback handler for default File.Open menu entry. Needs
        # @c to be overridden by clients
        
        # @c callback handler for default Edit.Undo menu entry. Needs
        # @c to be overridden by clients
        method onEditUndo {} {}
        # @c callback handler for default Edit.Redo menu entry. Needs
        # @c to be overridden by clients
        method onEditRedo {} {}
        # @c callback handler for default Edit.Cut menu entry. Needs
        # @c to be overridden by clients
        method onEditCut {} {}
        # @c callback handler for default Edit.Copy menu entry. Needs
        # @c to be overridden by clients
        method onEditCopy {} {}
        # @c callback handler for default Edit.Paste menu entry. Needs
        # @c to be overridden by clients
        method onEditPaste {} {}
        
        # @r the mainframe
        method mainframe {} {
            return [component mainframe component childsite]
        }
    }
    
    protected {
        # @v Menus: Array containing the menus each entry is a list of 
        # @v Menus: - the entry type (cascade, checkbutton, radiobutton, command)
        # @v Menus: - the index in it's parent
        variable Menus
        array set Menus {}
        
        # @c creates the default main menu.
        # @c Override in your app, if you need special menu entries
        method defaultMenu {}
    }
    
    private {
        # @c Creates and adds the status line at the bottom of the window
        method addStatusLine {}
        # @c Creates the mainframe to place widgets inside
        method addMainframe {}
    }
    
}

body ::Tmw::Platform::menuentry {name args} {
    set M [component mainmenu]
    
    # get type and toolbar
    set type ""
    set toolbar ""
    set cmd ""
    set accel ""
    set nargs {}
    for {set i 0} {$i < [llength $args]} {incr i} {
        set arg [lindex $args $i]
        switch -- $arg {
            -type {
                set j [expr {$i + 1}]
                set type [lindex $args [incr i]]
            }
            -toolbar {
                set j [expr {$i + 1}]
                set toolbar [lindex $args [incr i]]
            }
            -command {
                set cmd [lindex $args [incr i]]
                lappend nargs $arg $cmd
            }
            -accelerator {
                set accel [lindex $args [incr i]]
                lappend nargs $arg $accel
            }
            delete {
                return
            }
            default {
                lappend nargs $arg
            }
        }
    }
    
    # Configure the entry (or delete it) when it exists
    set sName $M.[string tolower $name]
    if {[info exists Menus($sName)]} {
        set parent [join [lrange [split $sName .] 0 end-1] .]
        set i [lindex $Menus($sName) 2]
        
        if {[llength $args] == 0} {
            return [array get Menus]
        }
        
        if {[llength $args] == 1} {
            # do an entrycget operation
            switch -- $args {
                -type {
                    return [lindex $Menus($sName) 1]
                }
                -toolbar {
                    return [lindex $Menus($sName) 3]
                }
            }
            
            return [$parent entrycget $i $args]
        }
        
        eval $parent entryconfigure $i $nargs
        
        # eval toolbar configuration as well
        if {[set tb [lindex $Menus($sName) 3]] != ""} {
            if {[set i [lsearch $nargs -label]] != -1} {
                lset nargs $i -text
            }
            if {[set i [lsearch $nargs -accelerator]] >= 0} {
                set nargs [lreplace $nargs $i [incr i]]
            }
            
            eval $tb configure $nargs
        }
        
        if {$cmd != "" && $accel != ""} {
            set accel [regsub {Ctrl} $accel Control]
            set accel [regsub {Meta} $accel M1]
            bind [namespace tail $this] <[set accel]> $cmd
        }
        
        return
    }
    
    # type must be given at this point
    if {$type == ""} {
        error "type must be given"
    }
    
    set parentMenu $M
    set pToolMenu ""
    set nm [lindex [split $name .] 0]
    if {[llength [split $name .]] > 1} {
        # toplevel is a cascade. Check whether it exists.
        # If it does not exist, create it
        set casc $M.[string tolower $nm]
        if {![info exists Menus($casc)]} {
            set Menus($casc) $nm
            lappend Menus($casc) cascade
            $parentMenu add cascade -label $nm -menu [menu $casc -tearoff no]
            lappend Menus($casc) [$parentMenu index last]
            lappend Menus($casc) ""
        }
        set parentMenu $casc
    }
    
    if {[llength [split $name .]] > 2} {
        # At least one sublevel is a cascade as well. Same procedure
        # as above
        set nnm $nm
        set parentMenu $casc
        foreach {cc} [lrange [split $name .] 1 end-1] {
            append casc .[string tolower $cc]
            append nnm .$cc
            if {[info exists Menus($casc)]} {
                set lclm [$parentMenu entrycget [lindex $Menus($casc) 2] -menu]
                
                # If this was an explicitely created cascade and it has a
                # toolbar entry (menubutton in a toolbar), then the corresp.
                # menu goes here
                set pToolMenu [lindex $Menus($casc) 4]
                if {$lclm == ""} {
                    $parentMenu entryconfigure [lindex $Menus($casc) 2] \
                        -menu [menu $casc -tearoff no]
                    set parentMenu $casc
                } else {
                    set parentMenu $casc
                }
                continue
            }
            
            set Menus($casc) $nnm
            lappend Menus($casc) cascade
            $parentMenu add cascade -label $cc -menu [menu $casc -tearoff no]
            lappend Menus($casc) [$parentMenu index last]
            lappend Menus($casc) ""
            
            set parentMenu $casc
        }
    }
    
    set sName $M.[string tolower $name]
    set Menus($sName) [list $name $type]
    #lappend Menus($sName) $type
    
    if {$type != "separator"} {
        # set some arguments if not present
        if {[lcontain $nargs -image] && ![lcontain $args -compound]} {
            lappend nargs -compound left
        }
        if {![lcontain $nargs -label]} {
            lappend nargs -label [lindex [split $name .] end]
        }
    }
    
    eval $parentMenu add $type $nargs
    lappend Menus($sName) [$parentMenu index last]
    if {$pToolMenu != ""} {
        eval $pToolMenu add $type $nargs
    }
    
    # Create a toolbar entry if requested
    set toolButton ""
    set toolMenu ""
    if {$toolbar != ""} {
        if {[set i [lsearch $nargs -label]] != -1} {
            lset nargs $i -text
        }
        if {[set i [lsearch $nargs -accelerator]] >= 0} {
            set nargs [lreplace $nargs $i [incr i]]
        }
        set toolButton [eval component mainframe toolbutton $name \
            -type $type -toolbar $toolbar $nargs]
        
        # if it is a cascade, create a menu for it. This is filled
        # with subsequent entries
        if {[string equal $type cascade]} {
            set toolMenu [menu $toolButton.m -tearoff no]
            $toolButton configure -menu $toolMenu
        }
        lappend Menus($sName) $toolButton $toolMenu
    } else {
        lappend Menus($sName) "" ""
    }
    
    if {$cmd != "" && $accel != ""} {
        set accel [regsub {Ctrl} $accel Control]
        set accel [regsub {Meta} $accel M1]
        bind [namespace tail $this] <[set accel]> $cmd
    }
    
    return [list $parentMenu [$parentMenu index last] $toolButton $toolMenu]
}

body ::Tmw::Platform::showProgress {{show -1}} {
    set prgShow [lcontain [pack slaves [component statusline]] \
            [component progress]]
    if {$show < 0} {
        return $prgShow
    }
    
    if {$show} {
        if {$prgShow} {
            # progress already showing
            return $prgShow
        }
        
        pack [component progress] -before [component action] \
            -fill x -expand n -side right -padx 3
        [component progress] start $progressincr
    } else {
        if {! $prgShow} {
            # progress already hidden
            return $prgShow
        }
        [component progress] stop
        pack forget [component progress]
    }
    
    return $show
}

body ::Tmw::Platform::defaultMenu {} {
    menuentry File.New -type command -toolbar maintoolbar \
        -image $Tmw::Icons(FileNew) -command [code $this onFileNew] \
        -accelerator Ctrl-n
    menuentry File.Open -type command -toolbar maintoolbar \
        -image $Tmw::Icons(FileOpen) -command [code $this onFileOpen] \
        -accelerator Ctrl-o
    menuentry File.Save -type command -toolbar maintoolbar \
        -image $Tmw::Icons(FileSave) -command [code $this onFileSave] \
        -accelerator Ctrl-s
    menuentry File.Close -type command -toolbar maintoolbar \
        -image $Tmw::Icons(FileClose) -command [code $this onFileClose] \
        -accelerator Ctrl-w
    menuentry File.Sep0 -type separator -toolbar maintoolbar
    menuentry File.Quit -type command -toolbar maintoolbar \
        -image $Tmw::Icons(ActExit) -command [code $this onQuit] \
        -accelerator Ctrl-q
    
    menuentry Edit.Undo -type command -toolbar maintoolbar \
        -image $Tmw::Icons(ActUndo) -command [code $this onEditUndo] \
        -accelerator Ctrl-z
    menuentry Edit.Redo -type command -toolbar maintoolbar \
        -image $Tmw::Icons(ActRedo) -command [code $this onEditRedo] \
        -accelerator Ctrl-r
    menuentry Edit.Sep0 -type separator -toolbar maintoolbar
    menuentry Edit.Cut -type command -toolbar maintoolbar \
        -image $Tmw::Icons(EditCut) -command [code $this onEditCut] \
        -accelerator Ctrl-x
    menuentry Edit.Copy -type command -toolbar maintoolbar \
        -image $Tmw::Icons(EditCopy) -command [code $this onEditCopy] \
        -accelerator Ctrl-c
    menuentry Edit.Paste -type command -toolbar maintoolbar \
        -image $Tmw::Icons(EditPaste) -command [code $this onEditPaste] \
        -accelerator Ctrl-v
}

body ::Tmw::Platform::addStatusLine {} {
    # status line
    itk_component add statusline {
        ttk::frame $itk_interior.statusline
    } {
        usual
        rename -relief -statusrelief statusRelief Relief
        rename -borderwidth -statusbd statusBd Borderwidth
        rename -height -statusheight statusHeight Height
    }
    
    configure -statusrelief flat -statusbd 0 -statusheight 20
    
    itk_component add action {
        ttk::label [component statusline].action \
            -textvariable [scope status]
    }
    
    itk_component add progress {
        ttk::progressbar [component statusline].progress
    } {
        usual
        rename -mode -progressmode progressMode Mode
        rename -length -progresslength progressLength Length
    }
    set sep1 [ttk::separator [component statusline].s1 \
        -orient vertical]
    
    pack [component action] -fill x -expand n -side right -padx 3
    pack $sep1 -fill y -expand n -side right -padx 5 -pady 2
    configure -progressmode determinate -progresslength 40
    pack [component statusline] -side bottom -expand no -fill x
    # end status line
}


body ::Tmw::Platform::addMainframe {} {
    
    itk_component add mainframe {
        Tmw::toolbarframe $itk_interior.mainframe
    } {
        usual
        rename -relief -mainrelief mainRelief Relief
        rename -borderwidth -mainbd mainBd Borderwidth
    }
    
    configure -mainrelief flat -mainbd 1
    pack [component mainframe] -expand yes -fill both
}

proc ::Tmw::mainapp {path args} {
    uplevel 0 Platform $path $args
}

## plugin code
plugin Tmw::Platform

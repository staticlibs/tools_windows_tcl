# automatically generated from XOTclIDE
# script require component {IDEView IDECore IDEBaseGUI}
@ Component IDEDocumentation {
description {This component contains 2 tools
1. CommentScanner - for extract all # comments from old tcl/xotcl code that are not maintained by XOTclIDE
2. Htmml Documentation Generator - Generate html documentation for selecting components using xotclide stucture and appending additional comments}
}
package provide IDEDocumentation 0.82
package require IDEBaseGUI
package require IDECore
package require IDEView
namespace eval ::Wikit::Format {}
@ tclproc Wikit::Format::Expand_HTML idemeta struct IDEDocumentation Wikit::Format
proc Wikit::Format::Expand_HTML str {
      StreamToHTML [TextToStream $str] {} {}
    }
@ tclproc Wikit::Format::StreamToHTML idemeta struct IDEDocumentation Wikit::Format
proc Wikit::Format::StreamToHTML {s {cgi {}} {ip {}}} {
	set result ""
	set state H   ; # bogus hline as initial state.
	set vstate "" ; # Initial state of visual FSM
	set count 0
	variable html_frag

	foreach {mode text} $s {
	    switch -exact -- $mode {
		{}    {append result [quote $text]}
		b - i {append result $html_frag($mode$text)}
		g {
		    if {$cgi == ""} {
			append result "\[[quote $text]\]"
			continue
		    }
		    if {$ip == ""} {
			# no lookup, turn into a searchreference
			append result  $html_frag(a_) $cgi$text $html_frag(tc)  [quote $text] $html_frag(_a)
			continue
		    }

		    set info [eval $ip [list $text]]
		    foreach {id name date} $info break

		    if {$id == ""} {
			# not found, don't turn into an URL
			append result "\[[quote $text]\]"
			continue
		    }

		    regsub {^/} $id {} id
		    if {$date > 0} {
			# exists, use ID
			append result  $html_frag(a_) $id $html_frag(tc)  [quote $text] $html_frag(_a)
			continue
		    }

		    # missing, use ID -- editor link on the brackets.
		    append result  $html_frag(a_) $id $html_frag(tc) \[ $html_frag(_a)  [quote $text]  $html_frag(a_) $id $html_frag(tc) \] $html_frag(_a)  }
		u {
		    append result  $html_frag(a_) $text $html_frag(tc)  [quote $text] $html_frag(_a)
		}
		x {
		    if {[regexp {\.(gif|jpg|png)$} $text]} {
			append result $html_frag(i_) $text $html_frag(tc)
		    } else {
			append result  \[ $html_frag(a_) $text $html_frag(tc)  [incr count] $html_frag(_a) \]
		    }
		}
		T - Q - I - D - U - O - H {
		    append result $html_frag($state$mode)
		    set state $mode
		}
	    }
	}
	# Close off the last section.
	append result $html_frag(${state}_)
	# Get rid of spurious newline at start of each quoted area.
	regsub -all "<pre>\n" $result "<pre>" result
	list $result {}
    }
@ tclproc Wikit::Format::StreamToRefs idemeta struct IDEDocumentation Wikit::Format
proc Wikit::Format::StreamToRefs {s ip} {
	array set pages {}
	
	foreach {mode text} $s {
	    if {![string equal $mode g]} {continue}

          	    set info [eval $ip [list $text]]
	    foreach {id name date} $info break
	    if {$id == ""} {continue}

	    regexp {[0-9]+} $id id
	    set pages($id) ""
	}
	
	array names pages
    }
@ tclproc Wikit::Format::StreamToUrls idemeta struct IDEDocumentation Wikit::Format
proc Wikit::Format::StreamToUrls s {
	array set urls {}
	foreach {mode text} $s {
	    if {$mode eq "u"} { set urls($text) imm }
	    if {$mode eq "x"} { set urls($text) ref }
	}
	array get urls
    }
@ tclproc Wikit::Format::TextToStream idemeta struct IDEDocumentation Wikit::Format
proc Wikit::Format::TextToStream text {
	# Based upon ideas from the kiwi renderer. One step rendering into
	# the internal representation without a script as intermediate step.

	set irep      [list] ; # Internal representation generated here.
	set paragraph ""     ; # Buffer for the text of a single paragraph
	set empty_std 0      ; # Boolean flag. Set if the preceding line was empty.

	foreach line [split $text \n] {
	    # Per line, classify the it and extract the main textual information.
	    foreach {tag depth txt aux} [linetype $line] break ; # lassign

	    # Classification tags
	    #
	    # UL, OL, DL = Lists (unordered/bullet, ordered/enum,
	    #                     definition/itemized)
	    # PRE        = Verbatim / Quoted lines
	    # HR         = Horizontal rule
	    # STD        = Standard text

	    ## Whenever we encounter a special line, not quoted, any
	    ## preceding empty line has no further effect.
	    #
	    switch -exact -- $tag {
		HR - UL - OL - DL {set empty_std 0}
		default {}
	    }

	    ## Whenever we encounter a special line, including quoted, we
	    ## have to render the data of the preceding paragraph, if
	    ## there is any.
	    #
	    switch -exact -- $tag {
		HR - UL - OL - DL - PRE {
		    if {$paragraph != {}} {
			lappend irep T 0 ; render $paragraph
			set paragraph ""
		    }
		}
		default {}
	    }

	    ## Now processs the lines according to their types.
	    #
	    # Tag | depth         | txt             | pfx           | aux
	    # ----+---------------+-----------------+---------------+---------------
	    # UL  | nesting level | text of item    | before bullet | bullet
	    # OL  | nesting level | text of item    | before bullet | bullet
	    # DL  | nesting level | term definition | before bullet | term
	    # PRE | 1             | text to display |
	    # HR  | 0             | text of ruler   |
	    # STD | 0             | text to display |
	    # ----+---------------+-----------------+---------------+---------------

	    # HR     - Trivial
	    # UL, OL - Mark their beginning and then render their text
	    #        - like a normal paragraph.
	    # DL     - Like list item, except that there are two different
	    #          parts of text we have to render, term and term definition.
	    # PRE    - Quoted text is searched for links, but nothing
	    #          more. An empty preceding line is added to the
	    #          quoted section to keep it at a distance from the
	    #          normal text coming before.
	    # STD    - Lines are added to the paragraph until an empty one is
	    #          encountered. This closes the paragraph.

	    switch -exact -- $tag {
		HR  {lappend irep H 1}
		UL  {lappend irep U 0 ; render $txt}
		OL  {lappend irep O 0 ; render $txt}
		DL  {
		    lappend irep I 0 ; render $aux
		    lappend irep D 0 ; render $txt
		}
		PRE {
		    # Transform a preceding 'STD {}' into an empty Q line,
		    # i.e make it part of the verbatim section, enforce
		    # visual distance.

		    if {$empty_std} {lappend irep Q 0 {} {}; set empty_std 0}
		    lappend irep Q 0
		    if {$txt != {}} {rlinks $txt}
		}
		STD {
		    if {$txt == {}} {
			if {$paragraph != {}} {
			    lappend irep T 0 ; render $paragraph
			    set paragraph ""
			}
			set empty_std 1
		    } else {
			if {$paragraph != {}} {append paragraph " "} 
			append paragraph $txt
			set empty_std 0
		    }
		}
		default {
		    error "Unknown linetype $tag"
		}
	    }
	}

	# Render the last paragraph, if any.

	if {$paragraph != {}} {
	    lappend irep T 0 ; render $paragraph
	}

	return $irep
    }
@ tclproc Wikit::Format::init idemeta struct IDEDocumentation Wikit::Format
proc Wikit::Format::init {} {
    variable  html_frag

    vs T T   </p><p> ;vs T Q  </p><pre> ;vs T U   </p><ul><li> ;vs T O   </p><ol><li>
    vs Q T </pre><p> ;vs Q Q \n         ;vs Q U </pre><ul><li> ;vs Q O </pre><ol><li>
    vs U T  </ul><p> ;vs U Q </ul><pre> ;vs U U         \n<li> ;vs U O  </ul><ol><li>
    vs O T  </ol><p> ;vs O Q </ol><pre> ;vs O U  </ol><ul><li> ;vs O O         \n<li>
    vs I T  </dl><p> ;vs I Q </dl><pre> ;vs I U  </dl><ul><li> ;vs I O  </dl><ol><li>
    vs D T  </dl><p> ;vs D Q </dl><pre> ;vs D U  </dl><ul><li> ;vs D O  </dl><ol><li>
    vs H T       <p> ;vs H Q      <pre> ;vs H U       <ul><li> ;vs H O       <ol><li>

    vs T I   </p><dl><dt> ;vs T D   </p><dl><dd>  ;vs T H   "</p><hr size=1>"  ;vs T _   </p>
    vs Q I </pre><dl><dt> ;vs Q D </pre><dl><dd>  ;vs Q H "</pre><hr size=1>"  ;vs Q _ </pre>
    vs U I  </ul><dl><dt> ;vs U D  </ul><dl><dd>  ;vs U H  "</ul><hr size=1>"  ;vs U _  </ul>
    vs O I  </ol><dl><dt> ;vs O D  </ol><dl><dd>  ;vs O H  "</ol><hr size=1>"  ;vs O _  </ol>
    vs I I           <dt> ;vs I D           <dd>  ;vs I H  "</dl><hr size=1>"  ;vs I _  </dl>
    vs D I           <dt> ;vs D D           <dd>  ;vs D H  "</dl><hr size=1>"  ;vs D _  </dl>
    vs H I       <dl><dt> ;vs H D       <dl><dd>  ;vs H H       "<hr size=1>"  ;vs H _     {}

    array set html_frag {
	a_ {<a href="}  b0 </b>
	_a {</a>}       b1 <b>
	i_ {<img src="} i0 </i>
	tc {">}         i1 <i>
    } ; # "
}
@ tclproc Wikit::Format::linetype idemeta struct IDEDocumentation Wikit::Format
proc Wikit::Format::linetype line {
	# Categorize a line of wiki text based on indentation and prefix

	set line [string trimright $line]

	## Compat: retain tabs ...
	## regsub -all "\t" $line "    " line
	#
	## More compat'ibility ...
	## The list tags allow non-multiples of 3 if the prefix contains at
	## least 3 spaces. The standard wiki accepts anything beyond 3 spaces.
	## Keep the kiwi regexes around for future enhancements.

	foreach {tag re} {
	    UL	{^(   + {0,2})(\*) (\S.*)$}
	    OL	{^(   + {0,2})(\d)\. (\S.*)$}
	    DL	{^(   + {0,2})([^:]+):   (\S.*)$}

	    UL	{^(   +)(\*) (\S.*)$}
	    OL	{^(   +)(\d)\. (\S.*)$}
	    DL	{^(   +)([^:]+):   (\S.*)$}
	} {
	    # Compat: Remove restriction to multiples of 3 spaces.

	    if {[regexp $re $line - pfx aux txt] } {
		#    && string length $pfx % 3 == 0
		return [list $tag [expr {[string length $pfx]/3}] $txt $aux]
	    }
	}

	# Compat: Accept a leading TAB is marker for quoted text too.

	if {([string index $line 0] == " ") || ([string index $line 0] == "\t")} {
	    return [list PRE 1 $line]
	}
	if {[regexp {^-{4,}$} $line]} {
	    return [list HR 0 $line]
	}
	return [list STD 0 $line]
    }
@ tclproc Wikit::Format::quote idemeta struct IDEDocumentation Wikit::Format
proc Wikit::Format::quote q {
	regsub -all {&} $q {\&amp;}  q
	regsub -all {"} $q {\&quot;} q ; # "
	regsub -all {<} $q {\&lt;}   q
	regsub -all {>} $q {\&gt;}   q
	regsub -all {&amp;(#\d+;)} $q {\&\1}   q
	return $q
    }
@ tclproc Wikit::Format::render idemeta struct IDEDocumentation Wikit::Format
proc Wikit::Format::render text {
	# Rendering of regular text: links, markup, brackets.

	# The main idea/concept behind the code below is to find the
	# special features in the text and to isolate them from the normal
	# text through special markers (\0\1...\0). As none of the regular
	# expressions will match across these markers later passes
	# preserve the results of the preceding passes. At the end the
	# string is split at the markers and then forms the list to add to
	# the internal representation. This way of doing things keeps the
	# difficult stuff at the C-level and avoids to have to repeatedly
	# match and process parts of the string.

	upvar irep irep
	variable codemap

	## puts stderr \]>>$irep<<\[
	## puts stderr >>>$text<<<

	# Detect page references, external links, bracketed external
	# links, brackets and markup (hilites).

	# Complex RE's used to process the string
	set pre  {\[([^\]]*)]}  ; # page references ; # compat
	set lre  {\m(https?|ftp|news|mailto|file):(\S+[^\]\)\s\.,!\?;:'>"])} ; # links
	set blre "\\\[\0\1u\2(\[^\0\]*)\0\\\]"

	# " - correct emacs hilite

	# Order of operation:
	# - Remap double brackets to avoid their interference.
	# - Detect embedded links to external locations.
	# - Detect brackets links to external locations (This uses the
	#   fact that such links are already specially marked to make it
	#   easier.
	# - Detect references to other wiki pages.
	# - Render bold and italic markup.
	#
	# Wiki pages are done last because there is a little conflict in
	# the RE's for links and pages: Both allow usage of the colon (:).
	# Doing pages first would render links to external locations
	# incorrectly.
	#
	# Note: The kiwi renderer had the order reversed, but also
	# disallowed colon in page titles. Which is in conflict with
	# existing wiki pages which already use that character in titles
	# (f.e. [COMPANY: Oracle].

	# Make sure that double brackets do not interfere with the
	# detection of links.
	regsub -all {\[\[} $text {\&!} text

	## puts stderr A>>$text<<*

	# Isolate external links.
	regsub -all $lre $text "\0\1u\2\\1:\\2\0" text
	## puts stderr C>>$text<<*

	# External links in brackets are simpler cause we know where the
	# links are already.
	regsub -all $blre $text "\0\1x\2\\1\0" text
	## puts stderr D>>$text<<*

	# Now handle wiki page references
	regsub -all $pre $text "\0\1g\2\\1\0" text
	## puts stderr B>>$text<<*

	# Hilites are transformed into on and off directives.
	# This is a bit more complicated ... Hilites can be written
	# together and possible nested once, so it has make sure that
	# it recognizes everything in the correct order!

	# Examples ...
	# {''italic'''''bold'''}         {} {<i>italic</i><b>bold</b>}
	# {'''bold'''''italic''}         {} {<b>bold</b><i>italic</i>}
	# {'''''italic_bold'''''}        {} {<b><i>italic_bold</i></b>}

	# First get all un-nested hilites
	while {
	    [regsub -all {'''([^']+?)'''} $text "\0\1b+\0\\1\0\1b-\0" text] ||
	    [regsub -all {''([^']+?)''}   $text "\0\1i+\0\\1\0\1i-\0" text]
	} {}

	# And then the remaining ones. This also captures the hilites
	# where the highlighted text contains single apostrophes.

	regsub -all {'''(.+?)'''} $text "\0\1b+\0\\1\0\1b-\0" text
	regsub -all {''(.+?)''}   $text "\0\1i+\0\\1\0\1i-\0" text


	# Normalize brackets ...
	set text [string map {&! [ ]] ]} $text]

	# Listify and generate the final representation of the paragraph.

	## puts stderr *>>$text<<*

	foreach item [split $text \0] {
	    ## puts stderr ====>>$item<<<

	    set cmd {} ; set detail {}
	    foreach {cmd detail} [split $item \2] break
	    set cmd [string trimleft $cmd \1]

	    ## puts stderr ====>>$cmd|$detail<<<

	    switch -exact -- $cmd {
		b+    {lappend irep b 1}
		b-    {lappend irep b 0}
		i+    {lappend irep i 1}
		i-    {lappend irep i 0}
		default {
		    if {$detail == {}} {
			# Pure text
			if {$cmd != ""} {
			    lappend irep {} $cmd
			}
		    } else {
			# References.
#2003-06-20: remove whitespace clutter in page titles
			regsub -all {\s+} [string trim $detail] { } detail
			lappend irep $cmd $detail
		    }
		}
	    }

	    ## puts stderr ======\]>>$irep<<\[
	}
	## puts stderr ======\]>>$irep<<\[
	return
    }
@ tclproc Wikit::Format::rlinks idemeta struct IDEDocumentation Wikit::Format
proc Wikit::Format::rlinks text {
	# Convert everything which looks like a link into a link. This
	# command is called for quoted lines, and only quoted lines.

	upvar irep irep

	# Compat: (Bugfix) Added " to the regexp as proper boundary of an url.
	set re {\m(https?|ftp|news|mailto|file):(\S+[^\]\)\s\.,!\?;:'>"])}
	set txt 0
	set end [string length $text]

	## Find the places where an url is inside of the quoted text.

	foreach {match dummy dummy} [regexp -all -indices -inline $re $text] {
	    # Skip the inner matches of the RE.
	    foreach {a e} $match break
	    if {$a > $txt} {
		# Render text which was before the url
		lappend irep {} [string range $text $txt [expr {$a - 1}]]
	    }
	    # Render the url
	    lappend irep u [string range $text $a $e]
	    set txt [incr e]
	}
	if {$txt < $end} {
	    # Render text after the last url
	    lappend irep {} [string range $text $txt end]
	}
	return
    }
@ tclproc Wikit::Format::vs idemeta struct IDEDocumentation Wikit::Format
proc Wikit::Format::vs {last current text} {
	variable html_frag
	set      html_frag($last$current) $text
	return
}
@ Class IDE::CommentScanerBrowser {
description {The comment scanner can be used by importing old tcl/xotcl source to XOTclIDE.
The problem is that # comments that are written before method are class
headers are lost be loading (source) scripts.
XOTclIDE use @ (metacommand) for specifing comments (see xotcl documentation).
This tool read scripts and extraxt # comments to internal XOTclIDE comments.
}
}
Class IDE::CommentScanerBrowser -superclass ::IDE::Browser
@ ::IDE::CommentScanerBrowser idemeta categories {scaning comment-setting}
@ ::IDE::CommentScanerBrowser idemeta categoriesMethods {{skipComment scaneFile getComment setComment getCommand} {setCommentInstprocClass setCommentObjectClass setCommentProc setCommentProcObject}}
@ ::IDE::CommentScanerBrowser idemeta component IDEDocumentation
IDE::CommentScanerBrowser instproc changeDir {} {
    my readDir [IDE::Dialog getDir]
}
IDE::CommentScanerBrowser instproc createSystemMenu {} {
    # no system menu
}
IDE::CommentScanerBrowser instproc getCommand {} {
    my instvar handler pLine commandBody
    set pLine [my skipEmptyLines $pLine]
    set commandBody $pLine
    append commandBody \n
    while {![eof $handler] && ![info complete $commandBody]} {
        append commandBody [gets $handler] \n
    }
}
IDE::CommentScanerBrowser instproc getComment {} {
    my instvar handler pLine commentBody
    set commentBody {}
    set line [string trim [gets $handler]]
    while {![eof $handler] && $line ne "" && [string index $line 0] eq "#"} {
        append commentBody [string trimleft $line "\#\t "] \n
        set line [string trim [gets $handler]]
    }
    set pLine $line
}
IDE::CommentScanerBrowser instproc getTitle {} {
   return "# Comment Scaner"
}
IDE::CommentScanerBrowser instproc readDir {{dir {}}} {
    my instvar win actualDir
    set actualDir $dir
    $win.dir.dirname configure -text $dir
    set names [ide::lcollect each [glob [file join $dir *]] {set each [file tail $each]}]
    [self]::files setList $names
}
IDE::CommentScanerBrowser instproc scane {} {
    my instvar importedComments
    set importedComments 0
    set files [[self]::files selectedItem]
    foreach file $files {
        my scaneFile $file
    }
    IDE::Dialog message "[llength $files] was scaned, $importedComments imperted comments"
}
IDE::CommentScanerBrowser instproc scaneFile file {
    my instvar handler actualDir
    set handler [open [file join $actualDir $file] r]
    my skipComment
    while {![eof $handler]} {
        my getCommand
        my setComment
        my getComment
    }
    close $handler
}
IDE::CommentScanerBrowser instproc selectAll {} {
   [self]::files addSelection 0 end
}
IDE::CommentScanerBrowser instproc selectTcl {} {
   set list [[self]::files getList]
   set index 0
   foreach item $list {
       if {[string match *.tcl $item] || [string match *.xotcl $item]} {
           [self]::files addSelection $index $index
       }
       incr index
   }
}
IDE::CommentScanerBrowser instproc setComment {} {
    my instvar commentBody commandBody
    puts "c $commandBody # $commentBody"
    set commentBody [string trim $commentBody]
    if {$commentBody eq "" || $commandBody eq ""} return
    set first [lindex $commandBody 0]
    set second [lindex $commandBody 1]
    set third [lindex $commandBody 2]
    if {$first eq "proc"} {
        my setCommentProc
    } elseif {$first eq "Object" || $first eq "Class"} {
        my setCommentObjectClass
    } elseif {$second eq "proc"} {
        my setCommentProcObject
    } elseif {$second eq "instproc"} {
        my setCommentInstprocClass
    }
    set commentBody {}
}
IDE::CommentScanerBrowser instproc setCommentInstprocClass {} {
    my instvar commentBody commandBody
    set class [lindex $commandBody 0]
    set name [lindex $commandBody 2]
    if {![Object isclass $class] || [$class info instprocs $name] eq ""} {
        my warningMessage "Class $class method $name not found"
    } else {
        $class setMethodComment Instance $name $commentBody
        my incr importedComments
    }
}
IDE::CommentScanerBrowser instproc setCommentObjectClass {} {
    my instvar commentBody commandBody
    set object [lindex $commandBody 1]
    if {![Object isobject $object]} {
        my warningMessage "Object $object not found"
    } else {
        $object setComment $commentBody
        my incr importedComments
    }
}
IDE::CommentScanerBrowser instproc setCommentProc {} {
    my instvar commentBody commandBody
    set name [lindex $commandBody 1]
    set desc [IDE::TclProcsDescription getMethodFor $name]
    if {$desc eq ""} {
        my warningMessage "proc $name not registered"
    } else {
        $desc setComment $commentBody
        my incr importedComments
    }
}
IDE::CommentScanerBrowser instproc setCommentProcObject {} {
    my instvar commentBody commandBody
    set object [lindex $commandBody 0]
    set name [lindex $commandBody 2]
    if {![Object isobject $object] || [$object info procs $name] eq ""} {
        my warningMessage "Object $object method $name not found"
    } else {
        $object setMethodComment Class $name $commentBody
        my incr importedComments
    }
}
IDE::CommentScanerBrowser instproc skipComment {} {
    my getComment
    my set commentBody {}
}
IDE::CommentScanerBrowser instproc skipEmptyLines line {
    my instvar handler
    while {[string trim $line] eq ""} {
        if {[gets $handler line] == -1} {
            break
        }
    }
    return $line
}
IDE::CommentScanerBrowser instproc specificInit {} {
    my instvar win

    message $win.message -text "This tool try to extract the standart tcl comment # (just before procedure header) from choosen files and set them as XotclIDE comments.\nYou can use this tool just after importing xotcl stuff to xotclide" -width 350
    
    frame $win.sel
    frame $win.dir
    
    button $win.scane -text Scane -command [list [self] scane]
    button $win.sel.all -text "All files" -command [list [self] selectAll]
    button $win.sel.allTcl -text "All tcl files" -command [list [self] selectTcl]
    button $win.dir.changedir -text "Change Dir" -command [list [self] changeDir]
    label $win.dir.dirname -relief sunken -border 2 -width 50 -anchor w
        
    IDE::ListView create [self]::files $win.files -multiselect 1
    
    pack $win.dir.dirname -fill x -expand yes -side left
    pack $win.dir.changedir -side left
    pack $win.sel.all $win.sel.allTcl -side left
    pack $win.message  -fill x
    pack $win.dir -anchor w -fill x
    pack $win.files -fill both -expand yes
    pack $win.sel $win.scane -anchor w
    
    my readDir
}
IDE::CommentScanerBrowser instproc warningMessage text {
    Transcript warning $text
}
IDE::CommentScanerBrowser proc newBrowser {} {
  return [my new [Object autoname .commScaner]]
}
@ Class IDE::DocGenerator {
description {Base classe for generation html documnetation.
}
}
Class IDE::DocGenerator -parameter {{ignorePrivate 0} {ignoreNoCommented 0} {wikitFormater 1}}
@ ::IDE::DocGenerator idemeta component IDEDocumentation
IDE::DocGenerator instproc generate {} {
   my instvar outdir fileName
   set mf [open [file join [my getOutDir] $fileName] w]
   fconfigure $mf -encoding utf-8
   puts $mf [subst -nobackslashes [my pageContent]]
   close $mf
}
IDE::DocGenerator instproc getClassMethodArguments {class p} {
    set arguments ""
    foreach arg [$class info args $p] {
        if {[$class info default $p $arg val]} {
            # add variables (val)
            lappend arguments [list $arg $val]
        } else {
            lappend arguments $arg
        }
    }
    if {$::xotcl::version>=1.3} {
        if {[$class info nonposargs $p] ne ""} {
            set arguments "[list [$class info nonposargs $p]] [list $arguments]"
        }
    }
    return $arguments
}
IDE::DocGenerator instproc getComment comment {
    my instvar wikitFormater
    if {$wikitFormater} {
        lindex [Wikit::Format::Expand_HTML $comment] 0
    } else {
        return "<pre>$comment</pre>"
    }
}
IDE::DocGenerator instproc getCommentClass {comment class} {
    if {$comment ne ""} {
        return "<div class=\"$class\">[my getComment $comment]</div>\n"
    } else {
        return
    }
}
IDE::DocGenerator instproc getInstMethodArguments {class p} {
    set arguments ""
    foreach arg [$class info instargs $p] {
        if {[$class info instdefault $p $arg val]} {
            # add variables (val)
            lappend arguments [list $arg $val]
        } else {
            lappend arguments $arg
        }
    }
    if {$::xotcl::version>=1.3} {
        if {[$class info instnonposargs $p] ne ""} {
            set arguments "[list [$class info instnonposargs $p]] [list $arguments]"
        }
    }
    return $arguments
}
IDE::DocGenerator instproc getMemberComment {member arguments comment} {
    append text {<div class="memitem">}
    append text "\n<div class=\"memproto\"><span class=\"memname\">$member</span> $arguments</div>\n"
    append text [my getCommentClass $comment memcomment]
    append text "</div>\n"
    return $text
}
IDE::DocGenerator instproc getOutDir {} {
    return {}
}
IDE::DocGenerator instproc getProcArguments p {
    set arguments ""
    foreach arg [::info args $p] {
        if {[::info default $p $arg val]} {
            # add variables (val)
            lappend arguments [list $arg $val]
        } else {
            lappend arguments $arg
        }
    }
    return $arguments
}
IDE::DocGenerator proc initializeAfterLoad {} {
    Wikit::Format::init
}
Class IDE::DocGeneratorComponent -superclass ::IDE::DocGenerator -parameter {componentObj fileName mainObject}
@ ::IDE::DocGeneratorComponent idemeta component IDEDocumentation
IDE::DocGeneratorComponent instproc componentComment {} {
   set text "<h2>Component [[my componentObj] getName]</h2>\n"
   set comment [[my componentObj] getComment]
   if {$comment ne ""} {
       append text "<div class=\"compcomment\">[my getComment $comment]</div>"
   }
   return $text
}
IDE::DocGeneratorComponent instproc contentClass class {
    set ind 0
    set text "<a name=\"class_$class\">\n<h3>Class $class</h3>\n"
    if {[$class info parameter] ne ""} {
        append text "parameters: [$class info parameter]<br>\n"
    }
    set scs [$class info superclass]
    if {$scs ne "::xotcl::Object"} {
        append text "<b>superclasses:</b>\n"
        foreach sc $scs {
            append text [my linkToObject $sc]
        }
        append text </br>
    }
    set scs [$class info subclass]
    if {$scs ne ""} {
        append text "<b>subclasses:</b>\n"
        foreach sc $scs {
            append text [my linkToObject $sc]
        }
        append text </br>
    }
    append text [my getCommentClass [$class getComment] objcomment]

    foreach m [lsort [$class info instprocs]] {
        set comment [$class getMethodComment Instance $m]
        if {$comment eq "" && [my ignoreNoCommented]} continue
        if {!$ind} {
            append text "<h3>Instprocs:</h3>\n"
            set ind 1
        }
        append text [my getMemberComment $m [my getInstMethodArguments $class $m] $comment]
    }
    append text [my contentObjectProcs $class]
    return $text
}
IDE::DocGeneratorComponent instproc contentClasses {} {
    set text {}
    foreach class [lsort [[my componentObj] getClasses]] {
        append text [my contentClass $class] <hr> \n
    }
    return $text
}
IDE::DocGeneratorComponent instproc contentList args {
    my instvar componentObj
    set text {}
    set ind 0
    foreach class [lsort [$componentObj getClasses]] {
        if {!$ind} {
            append text "Classes <ul>\n"
            set ind 1
        }
        append text "<li>[my localLinkToObject $class]</li>\n"
    }
    if {$ind} {
        append text "</ul> \n"
        append text "Classes Hierarchy <ul>\n"
        foreach tree [$componentObj getClassesHierarchy] {
            append text [my makeClassesHierarchyList $tree]
        }
        append text "</ul>\n"
    }
    set ind 0
    foreach object [lsort [$componentObj getObjects]] {
        if {!$ind} {
            append text "Objects <ul>\n"
            set ind 1
        }
        append text "<li>[my localLinkToObject $object]</li>\n"
    }
    if {$ind} {append text {</ul>} \n}
    set ind 0
    foreach pgroup [lsort [$componentObj getProcsGroups]] {
        if {!$ind} {
            append text "Procsgroups <ul>\n"
            set ind 1
        }
        append text "<li><a href=\"#pgroup_$pgroup\">$pgroup</a></li>\n"
    }
    if {$ind} {append text {</ul>} \n}
    return $text
}
IDE::DocGeneratorComponent instproc contentObject object {
    set ind 0
    set text "<a name=\"object_$object\">\n<h3>Object $object</h3>\n"
    append text [my getCommentClass [$object getComment] objcomment]
    append text [my contentObjectProcs $object]
    return $text
}
IDE::DocGeneratorComponent instproc contentObjectProcs class {
    set ind 0
    set text {}
    foreach m [lsort [$class info procs]] {
        set comment [$class getMethodComment Class $m]
        if {$comment eq "" && [my ignoreNoCommented]} continue
        if {!$ind} {
            append text "<h3>Procs:</h3>\n"
            set ind 1
        }
        append text [my getMemberComment $m [my getClassMethodArguments $class $m] $comment]
    }
    return $text
}
IDE::DocGeneratorComponent instproc contentObjects {} {
    set text {}
    foreach obj [lsort [[my componentObj] getObjects]] {
        append text [my contentObject $obj] <hr> \n
    }
    return $text
}
IDE::DocGeneratorComponent instproc contentProc group {
    set ind 0
    set text "<a name=\"pgroup_[$group name]\">\n<h3>Procsgroup [$group name]</h3>\n"
    append text [my getCommentClass [$group getComment] objcomment]
    foreach m [lsort [$group getProcsNames]] {
        set pobj [$group getProcObjForName $m]
        set comment [$pobj getComment]
        if {$comment eq "" && [my ignoreNoCommented]} continue
        if {!$ind} {
            append text "<h3>Methods:</h3>\n"
            set ind 1
        }
        append text [my getMemberComment $m [my getProcArguments $m] $comment]
    }
}
IDE::DocGeneratorComponent instproc contentProcs {} {
    set text {}
    foreach obj [lsort [[my componentObj] getProcsGroupsObjects]] {
        append text [my contentProc $obj] <hr> \n
    }
    return $text
}
IDE::DocGeneratorComponent instproc getOutDir {} {
  [my mainObject] getOutDir
}
IDE::DocGeneratorComponent instproc getTitle {} {
   [my componentObj] getName
}
IDE::DocGeneratorComponent instproc linkToObject obj {
    set name [string trimleft $obj :]
    if {[$obj getCompObject]==[[my componentObj] selfName]} {
        return "<a href=\"#class_$name\">$name</a>\n"
    } else {
        if {[ide::lcontain [[my mainObject] components] [$obj getComponentName]]} {
            return "<a href=\"[[my mainObject] fileNameForComponent [$obj getCompObject]]#class_$name\">$name</a>\n"
        }
    }
    return $name\n
}
IDE::DocGeneratorComponent instproc localLinkToObject obj { 
   set name [string trimleft $obj :]
   if {[Object isclass $obj]} {
       return "<a href=\"#class_$obj\">$name</a>"
   } else {
       return "<a href=\"#object_$obj\">$name</a>"
   }
}
IDE::DocGeneratorComponent instproc mainPageLink {} {
    return "<a href=\"[[my mainObject] fileName]\">Contents</a><hr>"
}
IDE::DocGeneratorComponent instproc makeClassesHierarchyList classes {
   set text "<li>[my localLinkToObject [lindex $classes 0]]</li>"
   set i 0
   foreach subtree [lrange $classes 1 end] {
       if {!$i} {
           append text "<ul>\n"
           set i 1
       }
       append text [my makeClassesHierarchyList $subtree]
   }
   if {$i} { append text "</ul>\n" }
   return $text
   
   
}
IDE::DocGeneratorComponent instproc pageContent {} {
  return {<html>
<title>[my getTitle]</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link rel="stylesheet" type="text/css" href="docu.css">
<body>
[my mainPageLink]
[my componentComment]
[my contentList]
<hr>
[my contentClasses]
[my contentObjects]
[my contentProcs]
</body>
</html>
}
}
@ Class IDE::DocGeneratorMain {
description {Used to genarate main index documentation page (index.html)}
}
Class IDE::DocGeneratorMain -superclass ::IDE::DocGenerator -parameter {components {fileName index.html} {outdir {}} docname}
@ ::IDE::DocGeneratorMain idemeta component IDEDocumentation
IDE::DocGeneratorMain instproc componentsList {} {
    my instvar components
    set listCont {}
    foreach comp $components {
        append listCont [my generateDocForComponent $comp] \n
    }
    return $listCont
}
IDE::DocGeneratorMain instproc fileNameForComponent cobj {
    return [$cobj standardFileNameBase].html
}
IDE::DocGeneratorMain instproc generate {} {
   my set components [IDE::Component orderComponents [my set components]]
   next
   my saveCss
}
IDE::DocGeneratorMain instproc generateDocForComponent component {
    my instvar outdir ignorePrivate ignoreNoCommented wikitFormater
    set cobj [IDE::Component getCompObjectForNameIfExist $component]
    if {$cobj eq ""} return
    set fname [my fileNameForComponent $cobj]
    set cg [IDE::DocGeneratorComponent new -volatile -componentObj $cobj -fileName $fname -mainObject [self] -ignorePrivate $ignorePrivate -ignoreNoCommented $ignoreNoCommented -wikitFormater $wikitFormater]
    $cg generate
    return "<li><a href=\"$fname\">$component</a>"
}
IDE::DocGeneratorMain instproc getOutDir {} {
    my outdir
}
IDE::DocGeneratorMain instproc getTitle {} {
    my instvar docname
    if {![info exists docname]} {
        return {XotclIDE producted documenation}
    } else {
        return $docname
    }
}
IDE::DocGeneratorMain instproc getUserName args {
   if {[Object isobject IDE::User]} { 
       return [[IDE::User getDefault] getName]
   } else  {
       return unknown
   }
}
IDE::DocGeneratorMain instproc pageContent {} {
  return {<html>
<title>[my getTitle]</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link rel="stylesheet" type="text/css" href="docu.css">
<body>
<big>[my getTitle]</big>
Components:
<ul>
[my componentsList]
</ul>
Generated by [my getUserName]<br>
Generated on [clock format [clock seconds]]
</body>
</html>
}
}
IDE::DocGeneratorMain instproc saveCss {} {
   set mf [open [file join [my getOutDir] docu.css] w]
   fconfigure $mf -encoding utf-8
   puts $mf {
H1,H2,H3,H4,H5,H6 {
	font-family: Geneva, Arial, Helvetica, sans-serif;
}
.memitem {
  width-min: 200px;
  padding: 4px;
  background-color: #eef3f5;
  border-width: 1px;
  border-style: solid;
  border-color: #dedeee;
  -moz-border-radius: 8px 8px 8px 8px;
}
.memname {
  white-space: nowrap;
  font-weight: bold;
  font-family: Geneva, Arial, Helvetica, sans-serif;
}
.memproto {
  background-color: #d5e1e8;
  border-width: 1px;
  border-style: solid;
  border-color: #84b0c7;
  -moz-border-radius: 8px 8px 8px 8px;
}
.compcomment {
    background-color: #D0E0E0;
  border-width: 1px;
  border-style: solid;
  border-color: #dedeee;
   -moz-border-radius: 8px 8px 8px 8px;
}
.objcomment {
    background-color: #D0E0E0;
  border-width: 1px;
  border-style: solid;
  border-color: #dedeee;
   -moz-border-radius: 8px 8px 8px 8px;
}
.memcomment {
  margin-left: 5pt;
}
pre {
  background-color: #C0D0D0;
  margin-left: 5pt;
  margin-top: 2pt;
  margin-bottom: 2pt;
  margin-right: 5pt;
  padding: 2pt;
  border-width: 1px;
  border-style: solid;
  border-color: #dedeee;
   -moz-border-radius: 8px 8px 8px 8px;
}
   }
   close $mf
}
@ Class IDE::HtmlGeneratorBrowser {
description {GUI for specifing html documentation generation}
}
Class IDE::HtmlGeneratorBrowser -superclass ::IDE::Browser
@ ::IDE::HtmlGeneratorBrowser idemeta component IDEDocumentation
IDE::HtmlGeneratorBrowser instproc changeDir {} {
   my set actualDir [IDE::Dialog getDir]
   [my set win].dir.dirname configure -text [my set actualDir]
}
IDE::HtmlGeneratorBrowser instproc createSystemMenu {} {
    # no system menu
}
IDE::HtmlGeneratorBrowser instproc excludeIDE {} {
    set idecore [concat [IDE::System getCoreComponentsAll] [IDE::System getExtraComponents]]
    foreach index [[self]::components selectedIndex] item [[self]::components selectedItem] {
        if {[ide::lcontain $idecore $item]} {
            [self]::components removeSelection $index $index
        }
    }
}
IDE::HtmlGeneratorBrowser instproc generate {} {
    my instvar win useWikit
    set docname [$win.docname.name get]

    set components [[self]::components selectedItem]
    if {$components eq ""} {
        IDE::Dialog message "No componets selected"
        return
    }
    set dg [IDE::DocGeneratorMain new -volatile [list -components $components] [list -outdir [my set actualDir]] [list -ignorePrivate [my set ignorePrivateCategory]] [list -ignoreNoCommented [my set ignoreNoCommented]] [list -docname $docname] [list -wikitFormater $useWikit]]
    $dg generate
}
IDE::HtmlGeneratorBrowser instproc getTitle {} {
    return "HTML Documentation Generator"
}
IDE::HtmlGeneratorBrowser instproc readComponents {} {
   [self]::components setList [IDE::IntroProxy getComponents]
}
IDE::HtmlGeneratorBrowser instproc selectAll {} {
   [self]::components addSelection 0 end
}
IDE::HtmlGeneratorBrowser instproc specificInit {} {
    my instvar win ignorePrivateCategory ignoreNoCommented useWikit

    my set actualDir {}
    my requireNamespace

    message $win.message -text "This tool genarate html documentation from comments and sturcture of choosen components. The documentation will be a set of html files with main entry page index.html" -width 350

    frame $win.sel
    frame $win.dir
    frame $win.docname

    button $win.generate -text Generate -command [list [self] generate]
    button $win.sel.all -text "All Components" -command [list [self] selectAll]
    button $win.sel.allTcl -text "Exclude IDE Components" -command [list [self] excludeIDE]
    button $win.dir.changedir -text "Change Dir" -command [list [self] changeDir]
    label $win.dir.dirname -relief sunken -border 2 -width 50 -anchor w

    label $win.docname.lab -text "documentation name"
    entry $win.docname.name
    $win.docname.name insert 0 "XOTcl docu"
    pack $win.docname.lab -side left
    pack $win.docname.name -side left -fill x

    checkbutton $win.igncategory -text "ignore private category" -variable [self]::ignorePrivateCategory
    checkbutton $win.ignnocommented -text "ignore no commented methods" -variable [self]::ignoreNoCommented
    checkbutton $win.usewikit -text "use wikit html formater" -variable [self]::useWikit
    set ignorePrivateCategory 1
    set ignoreNoCommented 0
    set useWikit 1

    IDE::ListView create [self]::components $win.files -multiselect 1

    pack $win.dir.dirname -fill x -expand yes -side left
    pack $win.dir.changedir -side left
    pack $win.sel.all $win.sel.allTcl -side left
    pack $win.message  -fill x
    pack $win.dir -anchor w -fill x
    pack $win.files -fill both -expand yes
    pack $win.sel -anchor w
    pack $win.docname -fill x
    pack $win.igncategory -anchor w
    pack $win.ignnocommented -anchor w
    pack $win.usewikit -anchor w
    pack $win.generate -anchor w

    my readComponents
}
IDE::HtmlGeneratorBrowser proc newBrowser {} {
  return [my new [Object autoname .commentscan]]
}
IDE::DocGenerator initializeAfterLoad

